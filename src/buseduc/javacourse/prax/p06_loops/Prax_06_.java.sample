package buseduc.javacourse.prax.p05_arrays;

public class Prax_06_ {
    public static void main(String[] args) {

        /**
        * Практикум. Циклы
        */

        /**
         * Задание 1
         Напишите программу с использованием цикла, которая выведет первые 10 натуральных чисел:
         */

        /**
         * Задание 2
         Напишите программу которая выведет первые n натуральных чисел (n задается в переменной в начале программы:

         int n = 3;

         */

        /**
         * Задание 3
         Напишите программу которая выведет первые n натуральных чисел (n задается в переменной в начале программы)
         в обратном порядке:

         int n = 3;

         3
         2
         1

         */

        /**
         * Задание 4
         Напишите программу которая сгенерирует n случайных чисел и выведет их среднее значение по формуле
         (сумма всех значений, деленная на количество)

         */

        /**
         * Задание 5
         Напишите программу "Секундомер", которая будет отсчитывать секунды от 1 до 60. После 60 снова начинается 1.
         Секундомер не останавливается, пока программа не остановлена принудительно.

         Для паузы между циклами можно использовать оператор

         Thread.sleep(1000);
         try … catch блок

         */

        /**
         * Задание 6
         Напишите программу, которая выводит таблицу умножения для числа, заданного в переменной n до достижения квадрата n:
         int n = 5;
         Вывод:
         5 X 0 = 0
         5 X 1 = 5
         5 X 2 = 10
         5 X 3 = 15
         5 X 4 = 20
         5 X 5 = 25

         */

        /**
         * Задание 7
         Напишите программу, которая выводит полную таблицу умножения до достижения квадрата n:
         int n = 2;

         Вывод:
         0 X 0 = 0    	1 X 0 = 0	    2 X 0 = 0
         0 X 1 = 0    	1 X 1 = 1       2 X 1 = 2
         0 X 2 = 0    	1 X 2 = 2	    2 X 2 = 4
         */

        /**
         * Задание 8
         Напишите программу, которая выведет пирамиду из чисел от 1 до 10 в таком виде:
         1
         12
         123
         1234
         12345
         123456
         1234567
         12345678
         123456789
         12345678910

            Tip: Печать последовательности символов без переноса строки:
            System.out.print(x);

         */

        /**
         * Задание 9
         Напишите программу, которая выведет половину пирамиды с учетом отступов:
                  @
                 @@
                @@@
               @@@@
              @@@@@
             @@@@@@
            @@@@@@@
           @@@@@@@@

         * Повышенная сложность: выведите полную пирамиду:
                   @
                  @@@
                 @@@@@
                @@@@@@@
               @@@@@@@@@
              @@@@@@@@@@@
             @@@@@@@@@@@@@
            @@@@@@@@@@@@@@@
           @@@@@@@@@@@@@@@@@
          @@@@@@@@@@@@@@@@@@@


         */

        /**
         * Задание 10
         Напишите программу, в которую можно ввести слова пословицы, и которая
         отсортирует их в порядке возрастания их длины;
         выведет их на печать.
         Пример ввода: String[] words = {"семеро", "с", "ложкой", "один", "с", "сошкой"};
         Пример вывода:
         с
         с
         один
         семеро
         ложкой
         сошкой

         */

        /**
         * Задание 11
         Напишите программу, которая выведет треугольник Паскаля с заданным количеством строк n.
         отсортирует их в порядке возрастания их длины;
         выведет их на печать.
         Пример ввода: int n = 6;
         Пример вывода:
              1
            1 2 1
           1 3 3 1
          1 4 6 4 1
         1 5 10 10 5 1

         Tip: Используйте двумерный массив:
         int[][] matrix = new int[n][n];


         */

        /**
         * Задание 12
         Дополните программу игры "Камень - ножницы - бумага"  (см. задание 11 из презентации "Условные переходы")
         Программа должна использовать циклические конструкции, конструкции if … else / switch … case

         */

    }

}
